statement ok
CREATE TABLE __mock_graph(src int, dst int, src_label VARCHAR, dst_label VARCHAR, distance int);

statement ok
INSERT INTO __mock_graph VALUES
    (0, 0, '000', '000', NULL),
    (1, 0, '001', '000', 1),
    (2, 0, '002', '000', 1),
    (3, 0, '003', '000', 1),
    (4, 0, '004', '000', 1),
    (5, 0, '005', '000', 1),
    (6, 0, '006', '000', 1),
    (7, 0, '007', '000', 1),
    (8, 0, '008', '000', 1),
    (9, 0, '009', '000', 1),
    (0, 1, '000', '001', 1),
    (1, 1, '001', '001', NULL),
    (2, 1, '002', '001', 1),
    (3, 1, '003', '001', 1),
    (4, 1, '004', '001', 1),
    (5, 1, '005', '001', 1),
    (6, 1, '006', '001', 1),
    (7, 1, '007', '001', 1),
    (8, 1, '008', '001', 1),
    (9, 1, '009', '001', 1),
    (0, 2, '000', '002', 1),
    (1, 2, '001', '002', 1),
    (2, 2, '002', '002', NULL),
    (3, 2, '003', '002', 1),
    (4, 2, '004', '002', 1),
    (5, 2, '005', '002', 1),
    (6, 2, '006', '002', 1),
    (7, 2, '007', '002', 1),
    (8, 2, '008', '002', 1),
    (9, 2, '009', '002', 1),
    (0, 3, '000', '003', 1),
    (1, 3, '001', '003', 1),
    (2, 3, '002', '003', 1),
    (3, 3, '003', '003', NULL),
    (4, 3, '004', '003', 1),
    (5, 3, '005', '003', 1),
    (6, 3, '006', '003', 1),
    (7, 3, '007', '003', 1),
    (8, 3, '008', '003', 1),
    (9, 3, '009', '003', 1),
    (0, 4, '000', '004', 1),
    (1, 4, '001', '004', 1),
    (2, 4, '002', '004', 1),
    (3, 4, '003', '004', 1),
    (4, 4, '004', '004', NULL),
    (5, 4, '005', '004', 1),
    (6, 4, '006', '004', 1),
    (7, 4, '007', '004', 1),
    (8, 4, '008', '004', 1),
    (9, 4, '009', '004', 1),
    (0, 5, '000', '005', 1),
    (1, 5, '001', '005', 1),
    (2, 5, '002', '005', 1),
    (3, 5, '003', '005', 1),
    (4, 5, '004', '005', 1),
    (5, 5, '005', '005', NULL),
    (6, 5, '006', '005', 1),
    (7, 5, '007', '005', 1),
    (8, 5, '008', '005', 1),
    (9, 5, '009', '005', 1),
    (0, 6, '000', '006', 1),
    (1, 6, '001', '006', 1),
    (2, 6, '002', '006', 1),
    (3, 6, '003', '006', 1),
    (4, 6, '004', '006', 1),
    (5, 6, '005', '006', 1),
    (6, 6, '006', '006', NULL),
    (7, 6, '007', '006', 1),
    (8, 6, '008', '006', 1),
    (9, 6, '009', '006', 1),
    (0, 7, '000', '007', 1),
    (1, 7, '001', '007', 1),
    (2, 7, '002', '007', 1),
    (3, 7, '003', '007', 1),
    (4, 7, '004', '007', 1),
    (5, 7, '005', '007', 1),
    (6, 7, '006', '007', 1),
    (7, 7, '007', '007', NULL),
    (8, 7, '008', '007', 1),
    (9, 7, '009', '007', 1),
    (0, 8, '000', '008', 1),
    (1, 8, '001', '008', 1),
    (2, 8, '002', '008', 1),
    (3, 8, '003', '008', 1),
    (4, 8, '004', '008', 1),
    (5, 8, '005', '008', 1),
    (6, 8, '006', '008', 1),
    (7, 8, '007', '008', 1),
    (8, 8, '008', '008', NULL),
    (9, 8, '009', '008', 1),
    (0, 9, '000', '009', 1),
    (1, 9, '001', '009', 1),
    (2, 9, '002', '009', 1),
    (3, 9, '003', '009', 1),
    (4, 9, '004', '009', 1),
    (5, 9, '005', '009', 1),
    (6, 9, '006', '009', 1),
    (7, 9, '007', '009', 1),
    (8, 9, '008', '009', 1),
    (9, 9, '009', '009', NULL);

statement ok
CREATE TABLE graph(src int, dst int, src_label VARCHAR, dst_label VARCHAR, distance int);

statement ok
INSERT INTO graph SELECT * FROM __mock_graph;

query I
select count(distance) from __mock_graph;
----
90

query II
-- sanity check
select count(distance), sum(distance) from (
    -- find shortest path within 1 neighbor
    select src, dst, src_label, dst_label, min(distance) as distance from (
        -- with in all the paths
        select
            left_graph.src as src,
            right_graph.dst as dst,
            left_graph.src_label as src_label,
            right_graph.dst_label as dst_label,
            (left_graph.distance + right_graph.distance) as distance
        from
            graph left_graph inner join graph right_graph
            on left_graph.dst = right_graph.src
    ) s group by src, dst, src_label, dst_label
) s;
----
100 200

query II
-- sanity check
select count(distance), sum(distance) from (
    -- find shortest path within 2 neighbors
    select src, dst, src_label, dst_label, min(distance) as distance from (
        -- with in all the paths
        select
            left_graph.src as src,
            right_graph.dst as dst,
            left_graph.src_label as src_label,
            right_graph.dst_label as dst_label,
            (left_graph.distance + right_graph.distance) as distance
        from (
            -- find shortest path within 1 neighbor
            select src, dst, src_label, dst_label, min(distance) as distance from (
                -- with in all the paths
                select
                    left_graph.src as src,
                    right_graph.dst as dst,
                    left_graph.src_label as src_label,
                    right_graph.dst_label as dst_label,
                    (left_graph.distance + right_graph.distance) as distance
                from
                    graph left_graph inner join graph right_graph
                    on left_graph.dst = right_graph.src
            ) s group by src, dst, src_label, dst_label
        ) left_graph inner join graph right_graph on left_graph.dst = right_graph.src
    ) s group by src, dst, src_label, dst_label
) s;
----
100 300

query II
-- sanity check
select count(distance), sum(distance) from (
    -- find shortest path within 3 neighbors
    select src, dst, src_label, dst_label, min(distance) as distance from (
        -- with in all the paths
        select
            left_graph.src as src,
            right_graph.dst as dst,
            left_graph.src_label as src_label,
            right_graph.dst_label as dst_label,
            (left_graph.distance + right_graph.distance) as distance
        from (
            -- find shortest path within 2 neighbors
            select src, dst, src_label, dst_label, min(distance) as distance from (
                -- with in all the paths
                select
                    left_graph.src as src,
                    right_graph.dst as dst,
                    left_graph.src_label as src_label,
                    right_graph.dst_label as dst_label,
                    (left_graph.distance + right_graph.distance) as distance
                from (
                    -- find shortest path within 1 neighbor
                    select src, dst, src_label, dst_label, min(distance) as distance from (
                        -- with in all the paths
                        select
                            left_graph.src as src,
                            right_graph.dst as dst,
                            left_graph.src_label as src_label,
                            right_graph.dst_label as dst_label,
                            (left_graph.distance + right_graph.distance) as distance
                        from
                            graph left_graph inner join graph right_graph
                            on left_graph.dst = right_graph.src
                    ) s group by src, dst, src_label, dst_label
                ) left_graph inner join graph right_graph on left_graph.dst = right_graph.src
            ) s group by src, dst, src_label, dst_label
        ) left_graph inner join graph right_graph on left_graph.dst = right_graph.src
    ) s group by src, dst, src_label, dst_label
) s;
----
100 400

query IITTI
select * from (
    select src, dst, src_label, dst_label, min(distance) as distance from (
        -- with in all the paths
        select
            left_graph.src as src,
            right_graph.dst as dst,
            left_graph.src_label as src_label,
            right_graph.dst_label as dst_label,
            (left_graph.distance + right_graph.distance) as distance
        from (
            -- find shortest path within 2 neighbors
            select src, dst, src_label, dst_label, min(distance) as distance from (
                -- with in all the paths
                select
                    left_graph.src as src,
                    right_graph.dst as dst,
                    left_graph.src_label as src_label,
                    right_graph.dst_label as dst_label,
                    (left_graph.distance + right_graph.distance) as distance
                from (
                    -- find shortest path within 1 neighbor
                    select src, dst, src_label, dst_label, min(distance) as distance from (
                        -- with in all the paths
                        select
                            left_graph.src as src,
                            right_graph.dst as dst,
                            left_graph.src_label as src_label,
                            right_graph.dst_label as dst_label,
                            (left_graph.distance + right_graph.distance) as distance
                        from
                            graph left_graph inner join graph right_graph
                            on left_graph.dst = right_graph.src
                    ) s group by src, dst, src_label, dst_label
                ) left_graph inner join graph right_graph on left_graph.dst = right_graph.src
            ) s group by src, dst, src_label, dst_label
        ) left_graph inner join graph right_graph on left_graph.dst = right_graph.src
    ) s group by src, dst, src_label, dst_label
) s where src = 0 order by dst limit 10;
----
0 0 000 000 4
0 1 000 001 4
0 2 000 002 4
0 3 000 003 4
0 4 000 004 4
0 5 000 005 4
0 6 000 006 4
0 7 000 007 4
0 8 000 008 4
0 9 000 009 4
