# SimpleSelectTest

include fixtures/optimizer.slt.inc

query III
SELECT * from test;
----
1 22 333
2 11 0
3 33 444
4 0 555

query I
SELECT b from test order by c;
----
11
22
33
0

query I
SELECT a from test order by c desc;
----
4
3
1
2

query II
SELECT c, b from test where a=1;
----
333 22

query III
SELECT a, b, c from test order by a + c;
----
2 11 0
1 22 333
3 33 444
4 0 555

# SelectOrderByTest

include fixtures/optimizer.slt.inc

query I
SELECT b from test order by c;
----
11
22
33
0

query I
SELECT a from test order by c desc;
----
4
3
1
2

query III
SELECT * from test order by a + c;
----
2 11 0
1 22 333
3 33 444
4 0 555

query III
SELECT * from test order by a;
----
1 22 333
2 11 0
3 33 444
4 0 555

# SelectLimitTest

include fixtures/optimizer.slt.inc

query I
SELECT b FROM test ORDER BY b LIMIT 3;
----
0
11
22

query I
SELECT b FROM test ORDER BY b LIMIT 2 OFFSET 2;
----
22
33

# SelectProjectionTest

include fixtures/optimizer.slt.inc

query II
SELECT a * 5 + b, -1 + c from test;
----
27 332
21 -1
48 443
20 554

query I
SELECT a * 5 + b - c FROM test ORDER BY a * 10 + b;
----
21
-306
-535
-396

query II
SELECT a, a + c FROM test ORDER BY a * 3 * b DESC, b + c / 5 ASC;
----
3 447
2 2
1 334
4 559

# DeleteSqlTest

include fixtures/optimizer.slt.inc

statement ok
DELETE FROM test WHERE a = 1 and c = 333;

query III
SELECT * FROM test;
----
2 11 0
3 33 444
4 0 555

statement ok
DELETE FROM test WHERE b = 33;

query III
SELECT * FROM test;
----
2 11 0
4 0 555

statement ok
DELETE FROM test WHERE b = 123;

query III
SELECT * FROM test;
----
2 11 0
4 0 555

statement ok
DELETE FROM test;

query III
SELECT * FROM test;
----

# UpdateSqlTest

include fixtures/optimizer.slt.inc

statement ok
UPDATE test SET c = b + 1 WHERE a = 1;

query I
SELECT c FROM test WHERE a=1;
----
23

# InsertSqlTest

include fixtures/optimizer.slt.inc

statement ok
INSERT INTO test VALUES (5, 55, 555);

query III
SELECT * FROM test WHERE a=5;
----
5 55 555

# DDLSqlTest

include fixtures/optimizer.slt.inc

statement ok
CREATE TABLE test2(a INT PRIMARY KEY, b INT, c INT);

statement ok
DROP TABLE test2;

# GroupByTest

include fixtures/optimizer.slt.inc

statement ok
INSERT INTO test VALUES
    (5, 11, 000),
    (6, 22, 333);

query I rowsort
SELECT b FROM test GROUP BY b having b=11 or b=22;
----
11
22

query I
SELECT COUNT(*) FROM test;
----
6

query I rowsort
SELECT COUNT(*) FROM test GROUP BY b;
----
1
1
2
2

query I rowsort
SELECT COUNT(a) FROM test GROUP BY b;
----
1
1
2
2

query I rowsort
SELECT b FROM test GROUP BY b having b=11 or b=22;
----
11
22

query I rowsort
SELECT COUNT(*) FROM test GROUP BY b;
----
1
1
2
2

query I rowsort
SELECT COUNT(a) FROM test GROUP BY b;
----
1
1
2
2

query RI
SELECT CAST(AVG(a) AS REAL), b FROM test GROUP BY b having b=22;
----
3.5 22

query RI rowsort
SELECT CAST(AVG(a) AS REAL), b FROM test GROUP BY b having AVG(a)=3.5;
----
3.5 11
3.5 22

query I
SELECT b FROM test GROUP BY b ORDER BY b;
----
0
11
22
33

query II
SELECT b, MAX(a + c) FROM test GROUP BY b ORDER BY b;
----
0 559
11 5
22 339
33 447

query II
SELECT b + c, SUM(c * a) FROM test GROUP BY b, c ORDER BY b + c;
----
11 0
355 2331
477 1332
555 2220

query I
SELECT SUM(c * a) FROM test;
----
5883

query I
SELECT SUM(c * a) + MAX(b - 1) * 2 FROM test;
----
5947

query I rowsort
SELECT MIN(b + c) * SUM(a - 2) FROM test GROUP BY b,c;
----
1065
1110
33
477

query I rowsort
SELECT MIN(c) + b FROM test GROUP BY b;
----
11
355
477
555

query I rowsort
SELECT MIN(b + c) * SUM(a - 2) + b * c FROM test GROUP BY b,c;
----
1110
15129
33
8391

query I
SELECT a FROM test GROUP BY a,b ORDER BY a + b;
----
4
2
5
1
6
3

query I
SELECT a FROM test GROUP BY a,b ORDER BY b,a, a+b;
----
4
2
5
1
6
3

query I
SELECT a + b FROM test GROUP BY a,b ORDER BY a;
----
23
13
36
4
16
28

# SelectDistinctTest

include fixtures/optimizer.slt.inc

statement ok
INSERT INTO test VALUES
    (5, 00, 555),
    (6, 22, 333);

query II rowsort
SELECT DISTINCT b,c FROM test GROUP BY b,c;
----
0 555
11 0
22 333
33 444

query I rowsort
SELECT DISTINCT b FROM test GROUP BY b,c;
----
0
11
22
33

statement ok
INSERT INTO test VALUES (7, 00, 444);

query I
SELECT DISTINCT b FROM test ORDER BY b;
----
0
11
22
33

skipif postgres
query II
SELECT DISTINCT b, c FROM test ORDER BY 10 * b + c;
----
11 0
0 444
22 333
0 555
33 444

skipif postgres
query III rowsort
SELECT DISTINCT * FROM test ORDER BY a + 10 * b + c LIMIT 3;
----
1 22 333
2 11 0
7 0 444

query I
SELECT DISTINCT b + c FROM test GROUP BY b + c ORDER BY b + c;
----
11
355
444
477
555

# SelectConstantTest

include fixtures/optimizer.slt.inc

query I
SELECT 1;
----
1

query I
SELECT 1 + 2 * (6 / 4);
----
3

query II
SELECT 18 / 4, 2 / 3 * 8 - 1;
----
4 -1

query II
SELECT 18 % 4, 2 / 3 * 8 - 1;
----
2 -1

query BBB
SELECT not 1>3, 1!=1, not 1=1;
----
t f f

query III
SELECT 1, 3 * 7, a from test;
----
1 21 1
1 21 2
1 21 3
1 21 4

# JoinTest

include fixtures/optimizer.slt.inc

statement ok
CREATE TABLE test1(a INT PRIMARY KEY, b INT, c INT);

statement ok
INSERT INTO test1 VALUES
    (1, 22, 333),
    (2, 11, 000),
    (3, 22, 444),
    (4, 00, 333);

statement ok
CREATE TABLE test2(a INT PRIMARY KEY, b INT, c INT);

statement ok
INSERT INTO test2 VALUES
    (1, 22, 000),
    (2, 11, 333),
    (3, 22, 555),
    (4, 00, 000);

statement ok
CREATE TABLE test3(a INT PRIMARY KEY, b INT, c INT);

statement ok
INSERT INTO test3 VALUES
    (1, 22, 000),
    (2, 11, 333),
    (3, 22, 555),
    (4, 00, 000);

query IIIIII
SELECT * FROM test1, test2 WHERE test1.a = 1 AND test2.b = 0;
----
1 22 333 4 0 0

query II rowsort
SELECT test.a, test1.b FROM test, test1 WHERE test1.b = 22;
----
1 22
1 22
2 22
2 22
3 22
3 22
4 22
4 22

query III
SELECT A.a, B.b, C.c FROM test AS A, test1 AS B, test2 AS C WHERE B.a = 1 AND A.b = 22 and C.a = 2;
----
1 22 333

query II rowsort
SELECT test.a, test1.a FROM test JOIN test1 ON test.a = test1.a;
----
1 1
2 2
3 3
4 4

query IIII rowsort
SELECT test.a, test.b, test1.b, test1.c FROM test, test1 WHERE test.b = test1.b;
----
1 22 22 333
1 22 22 444
2 11 11 0
4 0 0 333

query IIII rowsort
SELECT test.a, test.b, test1.b, test2.c FROM test2 JOIN test ON test.b = test2.b JOIN test1 ON test2.c = test1.c;
----
1 22 11 0
2 11 0 333
2 11 22 333
4 0 11 0

query IIII rowsort
SELECT test.a, test.b, test1.b, test2.c FROM test2, test, test1 WHERE test.b = test2.b AND test2.c = test1.c;
----
1 22 11 0
2 11 0 333
2 11 22 333
4 0 11 0

query IIII rowsort
SELECT test.a, test.b, test1.b, test2.c FROM test, test1, test2 WHERE test.b = test2.b AND test2.c = test1.c;
----
1 22 11 0
2 11 0 333
2 11 22 333
4 0 11 0

query II rowsort
SELECT test.a, test1.b FROM test, test1 WHERE test.a = test1.a  AND test1.b = 22;
----
1 22
3 22

query I rowsort
SELECT test.a FROM test, test1 WHERE test.a = test1.a AND test1.b = 22;
----
1
3

query II
SELECT A.a, B.a FROM test1 AS A, test1 AS B WHERE A.a = 1 and B.a = 1;
----
1 1

query II rowsort
SELECT A.b, B.b FROM test1 as A, test1 as B WHERE A.a = B.a;
----
0 0
11 11
22 22
22 22

query I rowsort
SELECT test.b FROM TEST, TEST1 WHERE test.a = test1.a and test.c > 333;
----
0
33

query II rowsort
SELECT test.a, test.b+test2.b FROM TEST, TEST2 WHERE test.a = test2.a;
----
1 44
2 22
3 55
4 0

query II
SELECT test.a, test.b+test2.b FROM TEST, TEST2 WHERE test.a = test2.a ORDER BY test.a+test.c+test2.c LIMIT 3;
----
1 44
2 22
4 0

query I rowsort
SELECT SUM(test2.b) FROM test, test2 WHERE test.a = test2.a GROUP BY test.a;
----
0
11
22
22

query II
SELECT SUM(test2.b), test.a FROM TEST, TEST2 WHERE test.a = test2.a GROUP BY test.a ORDER BY test.a;
----
22 1
11 2
22 3
0 4

query IIII rowsort
SELECT test.a, test1.a, test2.a, test3.c FROM test, test1, test2, test3 WHERE test.a = test2.a AND test2.a = test1.a and test.b = test3.b;
----
1 1 1 0
1 1 1 555
2 2 2 333
4 4 4 0

# IndexTest

include fixtures/optimizer.slt.inc

statement ok
create table foo(a int, b varchar(32), primary key(a, b));

statement ok
create index sk0 on foo(a);

statement ok
INSERT INTO foo VALUES
    (2, '323'),
    (2, '313'),
    (1, '313');

query IT rowsort
select * from foo where b = '313';
----
1 313
2 313

# QueryDerivedTableTest

include fixtures/optimizer.slt.inc

statement ok
CREATE TABLE test2(a int primary key, b int, c varchar(32));

statement ok
INSERT INTO test2 VALUES
    (1, 22, '1st'),
    (2, 11, '2nd'),
    (3, 33, '3rd'),
    (5, 00, '4th');

query I
select A.B from (select b from test where a = 1) AS A;
----
22

query I
select * from (select b from test where a = 1) AS A;
----
22

query II
select A.b, B.b from (select b from test where a = 1) as A, (select b from test as t where a=2) as B;
----
22 11

query I
select B.b from (select b from test where a = 1) as A, (select b from test AS t where a=2) AS B;
----
11

query II
select * from (select b from test where a = 1) as A, (select b from test as t where a=2) as B;
----
22 11

query II rowsort
select * from (select b from test) as A, (select b from test as t) as B where A.b = B.b;
----
0 0
11 11
22 22
33 33

query II rowsort
select * from (select b from test) as A, (select b from test) as B where A.b = B.b;
----
0 0
11 11
22 22
33 33

query IIIT rowsort
select * from (select a+b as a, c from test) AS A, (select a+b as a, c as c from test2) AS B where A.a=B.a;
----
13 0 13 2nd
23 333 23 1st
36 444 36 3rd

query IT
select A.c, B.c from (select a+b as a, c from test) as A, (select a+b as a, c as c from test2) as B where A.a=B.a order by A.a;
----
0 2nd
333 1st
444 3rd

query IR
select A.a, B.c from (select count(*) as a from test) as A, (select cast(avg(a) as real) as C from test2) as B;
----
4 2.75

# NestedQueryTest

#query I
#select B.a from test as B where exists (select b as a from test where a = B.a);
#----
#1
#2
#3
#4
#
#query I
#select b from test where a in (select a from test as t where a = test.a);
#----
#22
#11
#33
#0
#
#query I
#select B.a from test as B where
#    exists (select b as a from test2 where a = B.a) and b in (select b from test where b > 22);
#----
#3
#
#query I
#select B.a from test as B where exists (select b as a from test2 where a = B.a) and b in (select b from test) and c > 0;
#----
#1
#3
#
#query II rowsort
#select t1.a, t2.a from test as t1 join test as t2 on t1.a=t2.a where t1.b+t2.b in (select 2*b from test2 where a > 2);
#----
#3 3
#4 4
#
#skipif postgres
#query I
#select B.a from test as B where exists (select b as a from test as T where a = B.a) and exists (select c from test where T.c = c);
#----
#1
#2
#3
#4

# NestedQueryWithAggregationTest

statement ok
CREATE TABLE agg(a int, b int);

statement ok
INSERT INTO agg VALUES
    (1, 2),
    (1, 3),
    (2, 3),
    (2, 4);

#query I
#select B.a from test as B where exists (select count(b) from test where a = B.a);
#----
#1
#2
#3
#4
#
#query I
#select b from test where a in (select sum(a) from test as t where a = test.a group by b);
#----
#22
#11
#33
#0
#
#query I
#select b from test where a < (select avg(a)+10 from test as t where a = test.a group by b);
#----
#22
#11
#33
#0
#
#query I
#seleCt b
#from test as t where b/10+2 in (select sum(b) from agg where b < 4 and a = t.a group by a);
#----
#11
#
#query I
#select b from test as t where exists (select sum(b) from agg where b < 4 and a = t.a group by a);
#----
#22
#11

statement ok
create table student(sid int primary key, name varchar(32));

statement ok
create table course (cid int, sid int, score real);

statement ok
INSERT INTO student VALUES
    (1, 'Patrick'),
    (2, 'David'),
    (3, 'Alice'),
    (4, 'Bob');

#statement ok
#INSERT INTO course VALUES
#    (1, 1, 95),
#    (1, 2, 90.5),
#    (1, 3, 99),
#    (2, 1, 89),
#    (2, 2, 76),
#    (2, 3, 50),
#    (3, 1, 91),
#    (3, 2, 92.5),
#    (3, 3, 89),
#    (4, 1, 45),
#    (4, 2, 65),
#    (4, 3, 77);
#
#query TI rowsort
#select s.name, c.cid from student as s join course as c on s.sid = c.sid where c.score = (select min(score) from course where sid = s.sid) and s.sid < 4;
#----
#Alice 2
#David 4
#Patrick 4

# NestedQueryInHavingTest

include fixtures/optimizer.slt.inc

statement ok
INSERT INTO test VALUES
    (5, 11, 000),
    (7, 22, 333);

statement ok
CREATE TABLE test2(a int primary key, b int, c varchar(32));

statement ok
INSERT INTO test2 VALUES
    (7, 22, '1st'),
    (8, 11, '2nd'),
    (11, 33, '3rd'),
    (22, 00, '4th');

statement ok
CREATE TABLE agg(a int, b int);

statement ok
INSERT INTO agg VALUES
    (1, 22),
    (2, 33),
    (1, 11),
    (1, 11);

#query II rowsort
#select sum(a) as c, b from test as B group by b having exists (select b from test2 where a = B.b);
#----
#7 11
#8 22
#
#query II rowsort
#select sum(a) as c, b from test as B group by b having exists (select avg(a) from agg where b = B.b);
#----
#3 33
#4 0
#7 11
#8 22
#
#query II rowsort
#select sum(a) AS c, b from test as B group by b having exists (select avg(a) from agg where b = B.b group by b having avg(a) < 2);
#----
#7 11
#8 22
